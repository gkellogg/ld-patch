#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require 'ld/patch'
begin
  require 'linkeddata'
rescue LoadError
  require 'rdf/ntriples'
  require 'rdf/turtle'
end
require 'getoptlong'

def run(input, options = {})
  if options[:debug]
    puts "input graph:\n#{options[:graph].dump(:ttl, standard_prefixes: true)}\n" if options[:graph]
    puts "query:\n#{input}\n"
  end
  options[:graph] ||= RDF::Graph.new

  if options[:verbose]
    puts ("\nPATCH:\n" + input) 
  end

  patch = if options[:sse]
    SPARQL::Algebra.parse(input, options)
  else
    # Only do grammar debugging if we're generating SSE
    LD::Patch.parse(input, options)
  end

  puts ("\nSSE:\n" + patch.to_sse) if options[:debug] || options[:to_sse]

  unless options[:to_sse]
    res = patch.execute(options[:graph], debug: options[:debug])
    puts res.inspect if options[:verbose]
    puts res.dump(:ttl, base_uri: patch.base_uri, prefixes: patch.prefixes, standard_prefixes: true)
  end
end

opts = GetoptLong.new(
  ["--debug", GetoptLong::NO_ARGUMENT],
  ["--dump", GetoptLong::NO_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--progress", GetoptLong::NO_ARGUMENT],
  ["--sse", GetoptLong::NO_ARGUMENT],
  ["--to-sse", GetoptLong::NO_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT],
  ["--help", "-?", GetoptLong::NO_ARGUMENT]
)

options = {
  graph: RDF::Repository.new,
}

input = nil

opts.each do |opt, arg|
  case opt
  when '--debug'         then options[:debug] = true
  when '--dump'          then $dump = true
  when '--execute'       then input = arg
  when '--progress'      then options[:debug] ||= 2
  when '--sse'           then options[:sse] = true
  when '--to-sse'        then options[:to_sse] = true
  when '--verbose'       then options[:verbose] = true
  when "--help"
    puts "Usage: #{$0} [options] file-or-uri ..."
    puts "Options:"
    puts "      --execute,-e:         Use option argument as the SPARQL input if no files are given"
    puts "      --dump:               Dump raw output, otherwise serialize to SSE"
    puts "      --debug:              Display detailed debug output"
    puts "      --sse:                Input is in SSE format"
    puts "      --to-sse:             Generate SSE instead of running query"
    puts "      --verbose:            Display details of processing"
    puts "      --help,-?:            This message"
    exit(0)
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(s, options)
else
  ARGV.each do |test_file|
    puts "parse #{test_file}"
    run(RDF::Util::File.open_file(test_file).read, options.merge(base_uri: RDF::URI(test_file)))
  end
end
puts